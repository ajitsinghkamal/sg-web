{"version":3,"sources":["work.js"],"names":["$","document","ready","API","clientGrid","proGrid","btnClient","btnProactive","gridHolder","myLazyLoad","timer","constructGrid","gridData","gridType","dummyPanes","calcRequiredExtra","length","forEach","data","index","card","link","addClass","imgSlot","attr","append","image","slide","sl","hide","title","tag","addToGrid","error","console","message","i","newGridElement","grid","cell","available","reduce","acc","size","currentRequired","Math","max","beginShowcase","get","log","response","done","key","LazyLoad","addHoverToCards","fail","on","removeClass","slideShow","endSlideShow","event","fadeOut","fadeIn","setInterval","next","end","appendTo","clearInterval"],"mappings":"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","file":"../work.js","sourcesContent":["\n$(document).ready(() => {\n\n\t// Constants declaration\n\tconst API = \"https://sudeepgandhiweb.firebaseio.com/showcase.json\"; //database path\n\n\t// DOM references\n\tconst clientGrid = $(\".grid--client\");\n\tconst proGrid = $(\".grid--proactive\");\n\tconst btnClient = $(\".btn--client\");\n\tconst btnProactive = $(\".btn--proactive\");\n\tconst gridHolder = $(\".grid-holder\");\n\n\t// initialise lazy loading\n\tlet myLazyLoad;\n\n\tlet timer = null;\n\n\t/**\n\t * takes in response from firebase database\n\t * and construct the grid showcase of the work done\n\t * \n\t * @param {object} data \n\t */\n\tfunction constructGrid(gridData, gridType) {\n\t\tconst dummyPanes = calcRequiredExtra(gridData.length);\n\t\tgridData.forEach((data, index) => {\n\t\t\ttry {\n\t\t\t\tlet card = $(\"<a href=\" + data.link + \"></a>\").addClass('grid--cell card');\n\t\t\t\t// let card = $(\"\").addClass('');\n\n\t\t\t\tlet imgSlot = ($(\"<div class='project-image'></div>\").attr('id', gridType + index));\n\n\t\t\t\timgSlot.append($(\"<img data-original=\" + data.image + \"></div>\").addClass('lazyload'));\n\t\t\t\tif (data.slide) {\n\t\t\t\t\tdata.slide.forEach(sl => {\n\t\t\t\t\t\timgSlot.append($(\"<img src=\" + sl + \">\").hide());\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tcard.append(imgSlot);\n\t\t\t\tcard.append($(\"<div><h3>\" + data.title + \"</h3><p>\" + data.tag + \"</p></div>\").addClass('project-desc'));\n\n\t\t\t\taddToGrid(gridType, card, index);\n\n\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error.message);\n\t\t\t}\n\t\t});\n\n\t\tfor (let i = 0; i < dummyPanes; i++) {\n\t\t\tlet newGridElement = $(\"<div></div>\").addClass('grid--cell empty-cell');\n\t\t\taddToGrid(gridType, newGridElement);\n\t\t}\n\n\n\t}\n\n\tfunction addToGrid(grid, cell, index) {\n\n\t\tif (grid === 'clientWork') {\n\t\t\tclientGrid.append(cell);\n\t\t} else {\n\t\t\tproGrid.append(cell);\n\t\t}\n\n\t}\n\n\tfunction calcRequiredExtra(available) {\n\t\treturn [2, 3, 4, 5].reduce((acc, size) => {\n\t\t\tconst currentRequired = size - (available % size);\n\t\t\treturn Math.max(currentRequired, acc);\n\t\t}, 0)\n\t}\n\n\n\t/**\n\t * calls firebase data api , \n\t * fetches response and initiate grid construction\n\t * \n\t */\n\tfunction beginShowcase() {\n\t\t$.get(API, response => {\n\t\t\tconsole.log(response);\n\t\t})\n\t\t\t.done(response => {\n\t\t\t\tfor (let key in response) {\n\t\t\t\t\tconstructGrid(response[key], key);\n\t\t\t\t}\n\t\t\t\tmyLazyLoad = new LazyLoad();\n\t\t\t\taddHoverToCards();\n\t\t\t})\n\t\t\t.fail(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n\n\t//------------- event listeners ---------------------\n\n\t/**\n\t * \n\t */\n\tbtnClient.on('click', () => {\n\t\tbtnClient.addClass('active');\n\t\tbtnProactive.removeClass('active')\n\t\t// proGrid.addClass('hide');\n\t\t// clientGrid.removeClass('hide');\n\t\tgridHolder.removeClass('slide');\n\t})\n\n\tbtnProactive.on('click', () => {\n\t\tbtnClient.removeClass('active');\n\t\tbtnProactive.addClass('active')\n\t\t// clientGrid.addClass('hide');\n\t\t// proGrid.removeClass('hide');\n\t\tgridHolder.addClass('slide');\n\t})\n\n\tfunction addHoverToCards() {\n\t\t$('.project-image').on('mouseenter', slideShow);\n\t\t$('.project-image').on('mouseleave', endSlideShow);\n\n\t}\n\n\n\n\n\tbeginShowcase();\n\n\n\t// slideshow \n\tfunction slideShow(event) {\n\t\t$(':first-child', this).fadeOut();\n\t\t$(':nth-child(2)', this).fadeIn(1000);\n\t\ttimer = setInterval(() => {\n\t\t\t$(':nth-child(2)', this)\n\t\t\t\t.fadeOut(1000)\n\t\t\t\t.next()\n\t\t\t\t.fadeIn(1000)\n\t\t\t\t.end()\n\t\t\t\t.appendTo(this);\n\t\t}, 1200);\n\t}\n\n\tfunction endSlideShow(event) {\n\t\t$(':first-child', this).fadeIn(1000);\n\t\tclearInterval(timer);\n\t}\n\n});"]}